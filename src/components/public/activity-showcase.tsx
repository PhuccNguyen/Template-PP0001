'use client';

import React, { useState } from 'react';
import Image from 'next/image';
import { events } from '@/data/events';
import { Calendar, MapPin, Users, Mic, Building, Award, ExternalLink, X, ChevronDown, ChevronUp, Play, Image as ImageIcon, Link as LinkIcon, Newspaper, BarChart3, Eye } from 'lucide-react';
import { formatDate } from '@/lib/utils';
import styles from './activity-showcase.module.css';

// Type definitions
interface Event {
  id: string;
  title: string;
  description: string;
  date: string;
  location: string;
  category: 'talkshow' | 'workshop' | 'conference' | 'mou';
}

const categoryIcons = {
  talkshow: Mic,
  workshop: Users,
  conference: Building,
  mou: Award,
};

const categoryLabels = {
  talkshow: 'Talkshow',
  workshop: 'Workshop',
  conference: 'H·ªôi th·∫£o',
  mou: 'K√Ω k·∫øt MOU',
};

// Mock image data
const eventImages: { [key: string]: string[] } = {
  "1": [
    'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1517180102446-f3ece451e9d8?w=800&h=600&fit=crop',
  ],
  "2": [
    'https://images.unsplash.com/photo-1515187029135-18ee286d815b?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1531482615713-2afd69097998?w=800&h=600&fit=crop',
  ],
  "3": [
    'https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1542744173-8e7e53415bb0?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1515187029135-18ee286d815b?w=800&h=600&fit=crop',
  ],
  "4": [
    'https://images.unsplash.com/photo-1591115765373-5207764f72e7?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1517180102446-f3ece451e9d8?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=800&h=600&fit=crop',
  ],
};

// Mock media links
const eventMediaLinks: { [key: string]: { title: string; description: string; url: string }[] } = {
  "1": [
    { title: "B√°o Thanh Ni√™n", description: "L∆∞∆°ng k·ªπ s∆∞ AI c√≥ th·ªÉ l√™n t·ªõi t·ª∑ ƒë·ªìng m·ªói nƒÉm t·∫°i Vi·ªát Nam", url: "#" },
    { title: "VnExpress", description: "Sinh vi√™n Hu·∫ø h√°o h·ª©c t√¨m hi·ªÉu v·ªÅ c√¥ng ngh·ªá Blockchain", url: "#" },
    { title: "Tu·ªïi Tr·∫ª", description: "H∆∞·ªõng nghi·ªáp AI - Blockchain cho th·∫ø h·ªá Z", url: "#" },
  ],
  "2": [
    { title: "B√°o Gi√°o d·ª•c", description: "Workshop Blockchain thu h√∫t ƒë√¥ng ƒë·∫£o sinh vi√™n", url: "#" },
    { title: "ICTNews", description: "Xu h∆∞·ªõng ·ª©ng d·ª•ng Blockchain trong gi√°o d·ª•c", url: "#" },
  ],
  "3": [
    { title: "VietnamNet", description: "H·ªôi th·∫£o AI: C∆° h·ªôi v√† th√°ch th·ª©c", url: "#" },
    { title: "D√¢n Tr√≠", description: "Chuy√™n gia chia s·∫ª v·ªÅ t∆∞∆°ng lai AI", url: "#" },
    { title: "24h", description: "S·ª± ki·ªán c√¥ng ngh·ªá quy m√¥ l·ªõn t·∫°i Hu·∫ø", url: "#" },
  ],
  "4": [
    { title: "B√°o ƒê·∫ßu t∆∞", description: "K√Ω k·∫øt h·ª£p t√°c ph√°t tri·ªÉn c√¥ng ngh·ªá", url: "#" },
    { title: "B√°o Khoa h·ªçc", description: "Th√∫c ƒë·∫©y nghi√™n c·ª©u AI trong gi√°o d·ª•c", url: "#" },
  ],
};

export default function ActivityShowcase() {
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [showMore, setShowMore] = useState<boolean>(false);

  const INITIAL_DISPLAY_COUNT = 3; // Gi·∫£m t·ª´ 4 xu·ªëng 3 ƒë·ªÉ mobile kh√¥ng qu√° d√†i
  const displayedEvents = showMore ? events : events.slice(0, INITIAL_DISPLAY_COUNT);

  const openEventDetail = (event: Event): void => {
    setSelectedEvent(event);
  };

  const closeEventDetail = (): void => {
    setSelectedEvent(null);
  };

  const toggleShowMore = (): void => {
    setShowMore(!showMore);
  };

  return (
    <>
      <section className={styles.section}>
        <div className={styles.container}>
          {/* Section Header - Gi·∫£m padding */}
          <div className={styles.header}>
            <div className={styles.badge}>
              <span className={styles.badgeText}>üéØ Ho·∫°t ƒë·ªông n·ªïi b·∫≠t</span>
            </div>
            <h2 className={styles.title}>
              <span className={styles.gradientText}>S·ª± ki·ªán & Ho·∫°t ƒë·ªông</span>
            </h2>
            <p className={styles.description}>
              H√†nh tr√¨nh chia s·∫ª ki·∫øn th·ª©c v√† k·∫øt n·ªëi c·ªông ƒë·ªìng
            </p>
          </div>

          {/* Events Grid - Compact Layout */}
          <div className={styles.eventsContainer}>
            {displayedEvents.map((event: Event, index: number) => {
              const Icon = categoryIcons[event.category];
              const isEven = index % 2 === 0;
              const currentImages = eventImages[event.id] || [];
              
              return (
                <div 
                  key={event.id} 
                  className={`${styles.eventRow} ${isEven ? styles.eventRowNormal : styles.eventRowReverse}`}
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  {/* Image Section */}
                  <div 
                    className={styles.imageSection}
                    onClick={() => openEventDetail(event)}
                  >
                    <div className={styles.imageContainer}>
                      {currentImages.length > 0 ? (
                        <>
                          <Image
                            src={currentImages[0]} 
                            alt={event.title}
                            fill
                            className={styles.eventImage}
                            sizes="(max-width: 768px) 100vw, 50vw"
                            priority={index < 2}
                          />
                          <div className={styles.imageOverlay}>
                            <div className={styles.overlayContent}>
                              <Eye className={styles.overlayIcon} />
                              <span className={styles.overlayText}>Xem chi ti·∫øt</span>
                            </div>
                          </div>
                        </>
                      ) : (
                        <div className={styles.imagePlaceholder}>
                          <div className={`${styles.categoryIcon} ${styles[`icon-${event.category}`]}`}>
                            <Icon className={styles.icon} />
                          </div>
                        </div>
                      )}
                      
                      {/* Category Badge */}
                      <div className={`${styles.imageCategoryBadge} ${styles[`badge-${event.category}`]}`}>
                        <Icon className={styles.badgeIcon} />
                        <span>{categoryLabels[event.category]}</span>
                      </div>
                    </div>
                  </div>

                  {/* Content Section - Compact */}
                  <div className={styles.contentSection}>
                    <div className={styles.eventContent}>
                      {/* Meta Info */}
                      <div className={styles.eventMeta}>
                        <div className={styles.metaItem}>
                          <Calendar className={styles.metaIcon} />
                          <span className={styles.metaText}>{formatDate(event.date)}</span>
                        </div>
                        <div className={styles.metaItem}>
                          <MapPin className={styles.metaIcon} />
                          <span className={styles.metaText}>{event.location}</span>
                        </div>
                      </div>

                      {/* Title */}
                      <h3 
                        className={styles.eventTitle}
                        onClick={() => openEventDetail(event)}
                      >
                        {event.title}
                      </h3>

                      {/* Description - Compact */}
                      <p className={styles.eventDescription}>
                        {event.description}
                      </p>

                      {/* CTA Button - Single Button */}
                      <button 
                        className={`${styles.ctaButton} ${styles[`cta-${event.category}`]}`}
                        onClick={() => openEventDetail(event)}
                      >
                        <span>Xem chi ti·∫øt</span>
                        <ExternalLink className={styles.ctaIcon} />
                      </button>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          {/* See More/Less Button */}
          {events.length > INITIAL_DISPLAY_COUNT && (
            <div className={styles.seeMoreSection}>
              <button 
                className={styles.seeMoreButton}
                onClick={toggleShowMore}
              >
                <span>
                  {showMore 
                    ? 'Thu g·ªçn' 
                    : `Xem th√™m ${events.length - INITIAL_DISPLAY_COUNT} s·ª± ki·ªán kh√°c`
                  }
                </span>
                {showMore ? (
                  <ChevronUp className={styles.seeMoreIcon} />
                ) : (
                  <ChevronDown className={styles.seeMoreIcon} />
                )}
              </button>
              
              {!showMore && (
                <div className={styles.seeMorePreview}>
                  <span>ƒê·∫°i h·ªçc Hu·∫ø ‚Ä¢ BTEC ‚Ä¢ Greenwich ‚Ä¢ v√† nhi·ªÅu ho·∫°t ƒë·ªông kh√°c...</span>
                </div>
              )}
            </div>
          )}
        </div>
      </section>

      {/* Enhanced Modal v·ªõi nhi·ªÅu th√¥ng tin chi ti·∫øt */}
      {selectedEvent && (
        <div className={styles.modalOverlay} onClick={closeEventDetail}>
          <div className={styles.modalContent} onClick={(e: React.MouseEvent) => e.stopPropagation()}>
            <button className={styles.closeButton} onClick={closeEventDetail}>
              <X className={styles.closeIcon} />
            </button>
            
            {/* Modal Header */}
            <div className={styles.modalHeader}>
              <div className={`${styles.modalBadge} ${styles[`badge-${selectedEvent.category}`]}`}>
                {React.createElement(categoryIcons[selectedEvent.category], { className: styles.modalBadgeIcon })}
                <span>{categoryLabels[selectedEvent.category]}</span>
              </div>
              <h2 className={styles.modalTitle}>{selectedEvent.title}</h2>
              <div className={styles.modalSubtitle}>
                <Calendar className={styles.modalSubIcon} />
                <span>{formatDate(selectedEvent.date)}</span>
                <MapPin className={styles.modalSubIcon} />
                <span>{selectedEvent.location}</span>
              </div>
            </div>

            {/* Modal Body */}
            <div className={styles.modalBody}>
              {/* Main Image */}
              <div className={styles.modalImageSection}>
                <div className={styles.mainImageContainer}>
                  <Image
                    src={eventImages[selectedEvent.id]?.[0] || 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=800&h=600&fit=crop'} 
                    alt={selectedEvent.title}
                    fill
                    className={styles.modalMainImage}
                    sizes="(max-width: 768px) 100vw, 80vw"
                  />
                </div>
                
                {/* Thumbnail Gallery */}
                {eventImages[selectedEvent.id] && eventImages[selectedEvent.id].length > 1 && (
                  <div className={styles.thumbnailGallery}>
                    {eventImages[selectedEvent.id].map((img: string, index: number) => (
                      <div key={index} className={styles.thumbnail}>
                        <Image 
                          src={img} 
                          alt={`${selectedEvent.title} ${index + 1}`}
                          fill
                          className={styles.thumbnailImage}
                          sizes="80px"
                        />
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Event Stats - Compact & Visual */}
              <div className={styles.eventStatsSection}>
                <h3 className={styles.statsTitle}>
                  <BarChart3 className={styles.statsTitleIcon} />
                  Th·ªëng k√™ s·ª± ki·ªán
                </h3>
                <div className={styles.statsGrid}>
                  <div className={styles.statCard}>
                    <Users className={styles.statCardIcon} />
                    <div className={styles.statCardNumber}>1,200+</div>
                    <div className={styles.statCardLabel}>Ng∆∞·ªùi tham gia</div>
                  </div>
                  <div className={styles.statCard}>
                    <Newspaper className={styles.statCardIcon} />
                    <div className={styles.statCardNumber}>{eventMediaLinks[selectedEvent.id]?.length || 0}</div>
                    <div className={styles.statCardLabel}>B√°o ch√≠ ƒë∆∞a tin</div>
                  </div>
                  <div className={styles.statCard}>
                    <ImageIcon className={styles.statCardIcon} />
                    <div className={styles.statCardNumber}>{eventImages[selectedEvent.id]?.length || 0}</div>
                    <div className={styles.statCardLabel}>H√¨nh ·∫£nh</div>
                  </div>
                </div>
              </div>

              {/* Event Description */}
              <div className={styles.descriptionSection}>
                <h3 className={styles.sectionTitle}>Th√¥ng tin chi ti·∫øt</h3>
                <p className={styles.modalDescription}>
                  {selectedEvent.description}
                </p>
                <p className={styles.modalDescriptionExtended}>
                  S·ª± ki·ªán ƒë√£ t·∫°o n√™n d·∫•u ·∫•n m·∫°nh m·∫Ω trong c·ªông ƒë·ªìng sinh vi√™n v√† ƒë∆∞·ª£c ƒë√°nh gi√° cao 
                  v·ªÅ ch·∫•t l∆∞·ª£ng n·ªôi dung c≈©ng nh∆∞ t√≠nh th·ª±c ti·ªÖn. ƒê√¢y l√† c∆° h·ªôi tuy·ªát v·ªùi ƒë·ªÉ c√°c b·∫°n tr·∫ª 
                  ti·∫øp c·∫≠n v·ªõi nh·ªØng xu h∆∞·ªõng c√¥ng ngh·ªá m·ªõi nh·∫•t v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp trong t∆∞∆°ng lai.
                </p>
              </div>

              {/* Media Coverage - Compact List */}
              <div className={styles.mediaSection}>
                <h3 className={styles.sectionTitle}>
                  <Newspaper className={styles.sectionTitleIcon} />
                  B√°o ch√≠ & Truy·ªÅn th√¥ng
                </h3>
                <div className={styles.mediaList}>
                  {(eventMediaLinks[selectedEvent.id] || []).map((media, index) => (
                    <a 
                      key={index} 
                      href={media.url} 
                      className={styles.mediaItem}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <div className={styles.mediaIcon}>
                        <LinkIcon className={styles.mediaIconSvg} />
                      </div>
                      <div className={styles.mediaContent}>
                        <div className={styles.mediaTitle}>{media.title}</div>
                        <div className={styles.mediaDescription}>
                          {media.description.length > 60 
                            ? `${media.description.substring(0, 60)}...` 
                            : media.description
                          }
                        </div>
                      </div>
                      <ExternalLink className={styles.mediaLinkIcon} />
                    </a>
                  ))}
                </div>
              </div>

              {/* Action Buttons */}
              <div className={styles.modalActions}>
                <button className={styles.actionButton}>
                  <ImageIcon className={styles.actionIcon} />
                  <span>Xem th∆∞ vi·ªán ·∫£nh</span>
                </button>
                <button className={styles.actionButton}>
                  <Play className={styles.actionIcon} />
                  <span>Video highlights</span>
                </button>
                <button className={styles.actionButton}>
                  <ExternalLink className={styles.actionIcon} />
                  <span>B√†i vi·∫øt ƒë·∫ßy ƒë·ªß</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
